rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return isRole('admin');
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Settings can only be read by any authenticated user, but only written by an admin
    match /settings/{docId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }
    
    // User profile data
    match /users/{userId} {
      // Admins can read any user profile. Users can read their own profile.
      allow get: if isUserAuthenticated() && (isAdmin() || isOwner(userId));
      // Users can be created by admins. Users can update their own data. Admins can update any user.
      allow write: if isUserAuthenticated() && (isAdmin() || isOwner(userId));
    }
    
    match /teachers/{teacherId} {
      allow get: if isUserAuthenticated();
      allow write: if isAdmin() || isOwner(teacherId);
    }
    
    match /admin/{adminId} {
       allow get: if isUserAuthenticated();
       allow write: if isAdmin();
    }

    // Attendance records
    match /photo_attendances/{attendanceId} {
      // Allow create if user is authenticated (they are creating their own record)
      allow create: if isUserAuthenticated();
      
      // Allow read if user is admin or they are the owner of the record
      allow get: if isUserAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      
      // Allow update/delete only if user is an admin
      allow update, delete: if isAdmin();
    }
    
    match /{path=**}/photo_attendances/{attendanceId} {
       // Allow create if user is authenticated (they are creating their own record)
      allow create: if isUserAuthenticated();
      
      // Allow read if user is admin or they are the owner of the record
      allow get: if isUserAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      
      // Allow update/delete only if user is an admin
      allow update, delete: if isAdmin();
    }
  }
}
